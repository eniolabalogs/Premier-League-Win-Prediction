import pandas as pd
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, precision_score

# Load and preprocess the data
matches = pd.read_csv("matches.csv", index_col=0)
matches["date"] = pd.to_datetime(matches["date"])
matches["venue_code"] = matches["venue"].astype("category").cat.codes
matches["opp_code"] = matches["opponent"].astype("category").cat.codes
matches["hour"] = matches["time"].str.replace(":.+", "", regex=True).astype("int")
matches["day_code"] = matches["date"].dt.dayofweek
matches["target"] = (matches["result"] == "W").astype("int")

# Train-test split
train = matches[matches["date"] < "2024-01-01"]
test = matches[matches["date"] >= "2024-01-01"]

predictors = ["venue_code", "opp_code", "hour", "day_code"]

# Train the model and make predictions
rf = RandomForestClassifier(n_estimators=50, min_samples_split=10, random_state=1)
rf.fit(train[predictors], train["target"])
preds = rf.predict(test[predictors])

# Calculate accuracy and precision
acc = accuracy_score(test["target"], preds)
combined = pd.DataFrame(dict(actual=test["target"], prediction=preds))
pd.crosstab(index=combined["actual"], columns=combined["prediction"])
precision = precision_score(test["target"], preds)

print("Accuracy:", acc)
print("Precision:", precision)

# Function to calculate rolling averages
def rolling_averages(group, cols, new_cols):
    group = group.sort_values("date")
    rolling_stats = group[cols].rolling(3, closed="left").mean()
    group[new_cols] = rolling_stats
    group = group.dropna(subset=new_cols)
    return group

cols = ["gf", "ga", "sh", "sot", "dist", "fk", "pk", "pkatt"]
new_cols = [f"{c}_rolling" for c in cols]

# Apply rolling averages
matches_rolling = matches.groupby("team").apply(lambda x: rolling_averages(x, cols, new_cols))
matches_rolling = matches_rolling.droplevel("team")
matches_rolling.index = range(matches_rolling.shape[0])
print(matches_rolling.head())

# Function to make predictions
def make_predictions(data, predictors):
    train = data[data["date"] < "2024-01-01"]
    test = data[data["date"] >= "2024-01-01"]
    rf.fit(train[predictors], train["target"])
    preds = rf.predict(test[predictors])
    combined = pd.DataFrame(dict(actual=test["target"], prediction=preds))
    precision = precision_score(test["target"], preds)
    return combined, precision

# Make predictions with new rolling features
combined, precision = make_predictions(matches_rolling, predictors + new_cols)
print("Combined Precision:", precision)
